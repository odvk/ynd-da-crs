#5. Локальные и глобальные переменные
#Мы будем часто создавать функции. Давайте немного разберёмся в их устройстве, чтобы избежать неприятных сюрпризов. Вроде таких:

# предположим, что бюджет фильма состоит из двух частей: в долларах и в рублях
rubles = 1200
dollars = 65

# какова будет сумма в рублях?
# определим функцию для перевода долларов в рубли

rubles_for_dollar = 67.01

def dollars_to_rubles(dollars):
    # мы опечатались в названии переменной rubles
    rubls = dollars * rubles_for_dollar
    # это строка все равно работает, но использует не ту переменную
    return rubles

total = rubles + dollars_to_rubles(dollars)
print("Суммарный бюджет: {:.2f} млн ₽".format(total))
# Суммарный бюджет: 2400.00 млн ₽
# бюджет на самом деле: 5555.65 млн ₽

#Всё дело в объявлении переменных. Функция, встречая переменную, пытается найти её значение в своём же коде. Если находит — пользуется, если нет — начинает смотреть «снаружи», в коде программы. Получается, если и внутри, и снаружи от функции есть переменные с одинаковыми именами, будет использована та, что внутри.

#Мы объявили переменную rubles вне функции, а затем хотели объявить переменную с таким же именем внутри. Из-за опечатки функция не нашла значение внутри себя и пошла смотреть снаружи. Нашла и вернула нам. Функция отработала хорошо, но получилось совсем не то, чего мы хотели.
#Избежать таких проблем поможет знание о глобальных и локальных переменных. Глобальные переменные — это те, что объявлены вне функций. К ним можно обращаться откуда угодно. Отсюда и название.
#Соответственно, переменные, объявленные внутри функции, — локальные. К ним обратиться из кода вне тела функции нельзя.
#Не давайте локальным и глобальным переменным одинаковые имена — опечатки потом очень трудно искать в коде.

def column_sum(data, column):
    result = 0
    for row in data:
        result += row[column]
    return result
# Переменная result — локальная. Обращение к ней
# снаружи от функции приводит к ошибке:
print(result)

# Локальные переменные можно сравнить с людьми, находящимися с вами в одной комнате, а глобальные — со знакомыми, чей номер телефона у вас есть. Вы можете обратиться к любому человеку, пока он в той же комнате, что и вы. А своему знакомому вы можете позвонить, где бы он ни был.

#Вернёмся к нашей сломанной функции dollars_to_rubles() и починим её. Сначала поменяем имя глобальной переменной на более говорящее, назовём её budget_rubles:

budget_rubles = 1200
budget_dollars = 65

rubles_for_dollar = 67.01

def dollars_to_rubles(dollars):
    rubls = dollars * rubles_for_dollar
    return rubles

total = budget_rubles + dollars_to_rubles(budget_dollars)
print("Суммарный бюджет: {:.2f} млн ₽".format(total))

#Теперь Python отловил наш недосмотр и сообщает о нём. Это полезно, потому что облегчает нам поиск ошибок. Последуем совету Python и поправим локальную переменную:

budget_rubles = 1200
budget_dollars = 65

rubles_for_dollar = 67.01

def dollars_to_rubles(dollars):
    rubles = dollars * rubles_for_dollar
    return rubles

total = budget_rubles + dollars_to_rubles(budget_dollars)
print("Суммарный бюджет: {:.2f} млн ₽".format(total))

#Функция dollars_to_rubles() использует глобальную переменную rubles_for_dollar. Так делать не стоит — лучше, чтобы функция работала только со своими, локальными, переменными. Иначе:
#Сложно будет перенести функцию в другую программу: чтобы всё работало, придётся заодно искать и переносить глобальные переменные;
#Сложно будет читать код — придётся то и дело переключаться с функции на поиск глобальной переменной в коде и обратно.
#Исключение — глобальные переменные, чьё значение в коде не меняется. Такие переменные называют константами. Внимание: для Python это обычные глобальные переменные. Просто разработчики договорились, что если переменная не меняет своего значения нигде в коде, ей дают название из прописных букв. Так при чтении кода легко отличать переменные от констант. А ещё так вы гарантированно не назовёте одинаково локальную переменную и константу.

RUBLES_FOR_DOLLAR = 67.01


budget_rubles = 1200
budget_dollars = 65


def dollars_to_rubles(dollars):
    rubles = dollars * RUBLES_FOR_DOLLAR
    return rubles


total = budget_rubles + dollars_to_rubles(budget_dollars)
print("Суммарный бюджет: {:.2f} млн ₽".format(total))

# Рекомендуем объявлять константы в самом начале кода программы — так их будет проще искать. Опытные разработчики хранят в константах все числовые значения, даже очевидные, вроде количества минут в часах. Это делает код понятнее.

